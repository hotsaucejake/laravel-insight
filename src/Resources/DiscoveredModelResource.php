<?php

namespace LaravelInsight\Resources;

use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;
use LaravelInsight\Models\DiscoveredModel;

class DiscoveredModelResource extends Resource
{
    // Use our fake model for the resource.
    protected static ?string $model = DiscoveredModel::class;

    public static function getEloquentQuery(): Builder
    {
        // Discover models based on user configuration.
        $data = static::discoverModels();

        // Wrap the discovered array into our fake model's query builder.
        return DiscoveredModel::fromArray($data)->query();
        //        return parent::getEloquentQuery(); // TODO: Change the autogenerated stub
    }

    public static function table(Table $table): Table
    {
        //        // Discover models based on user configuration.
        //        $data = static::discoverModels();
        //
        //        // Wrap the discovered array into our fake model's query builder.
        //        $query = DiscoveredModel::fromArray($data)->query();

        return $table
            // ->query($query)
            ->columns([
                TextColumn::make('class')
                    ->label('Model Class')
                    ->sortable()
                    ->searchable(),
            ]);
    }

    /**
     * Scan the configured namespaces and discover Eloquent models.
     */
    protected static function discoverModels(): array
    {
        $models = [];
        $namespaces = config('laravel-insight.model_namespaces', ['App\\Models']);

        foreach ($namespaces as $namespace) {
            // Assume models live in app/Models or app/â€¦
            $path = base_path(str_replace('\\', '/', Str::after($namespace, 'App\\')));
            if (!is_dir($path)) {
                continue;
            }

            foreach (File::allFiles($path) as $file) {
                $class = $namespace . '\\' . str_replace('.php', '', $file->getFilename());
                if (class_exists($class) && is_subclass_of($class, Model::class)) {
                    $models[] = ['class' => $class];
                }
            }
        }

        return $models;
    }

    public static function getRelations(): array
    {
        return [
            // Register the relation manager that will show model details.
            // \LaravelInsight\Resources\ModelInsightResource\RelationManagers\ModelDetailRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [];
    }

    // Since this resource is read-only, we can leave the form method empty.
    public static function form(Form $form): Form
    {
        return $form;
    }
}
